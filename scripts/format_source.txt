%SCRIPT

// Configuration

config = {
	// Names of environments that do not indent their children
	noIndent: [],

	// Names of commands that should be placed on separate lines.
	separateLine: ['\\documentclass', '\\usepackage']
};

// Common utility functions

fatal_error = function (message) {
	throw (message);
};

configArrayToMap = function (configArray) {
	var result, i;

	result = {};
	for (i in configArray) {
		result [configArray [i]] = null
	}
	return (result);
};

// Class ParseNode. Represents one document node. Can be organized either in linear or tree form

ParseNode = function (props) {
	var i;

	for (i in props) {
		this [i] = props [i];
	}
};
ParseNode.prototype = {
	addChild: function (child) {
		if (('children' in this) == false) {
			fatal_error ('Cannot add a child to node of type: ' + this.type);
		}
		this.children.push (child);
	}
};
// Each node type can be used in linear form, tree form or both
ParseNode.typeComment = 1;	// linear, tree
ParseNode.typeEmptyLine = 2;	// linear, tree
ParseNode.typeEnv = 3;		// tree
ParseNode.typeEnvBegin = 4;	// linear
ParseNode.typeEnvEnd = 5;	// linear
ParseNode.typeRoot = 6;		// tree
ParseNode.typeText = 7;		// linear, tree
ParseNode.typeVerbatim = 8;	// linear, tree
ParseNode.createComment = function (text) {
	return (new ParseNode ({type: ParseNode.typeComment, text: text}));
};
ParseNode.createEmptyLine = function () {
	return (new ParseNode ({type: ParseNode.typeEmptyLine}));
};
ParseNode.createEnv = function (envName, textOpen, textClose) {
	return (new ParseNode ({
		type: ParseNode.typeEnv,
		envName: envName,
		textOpen: textOpen,
		textClose: textClose,
		children: []
	}));
};
ParseNode.createEnvBegin = function (envName, text) {
	return (new ParseNode ({type: ParseNode.typeEnvBegin, envName: envName, text: text}));
};
ParseNode.createEnvEnd = function (envName, text) {
	return (new ParseNode ({type: ParseNode.typeEnvEnd, envName: envName, text: text}));
};
ParseNode.createRoot = function () {
	return (new ParseNode ({type: ParseNode.typeRoot, children: []}));
};
ParseNode.createText = function (text) {
	return (new ParseNode ({type: ParseNode.typeText, text: text}));
};
ParseNode.createVerbatim = function (text) {
	return (new ParseNode ({type: ParseNode.typeVerbatim, text: text}));
};

// Class ParseTree

function ParseTree (document)
{
	this.tabNumCols = parseInt (ParseTree._priv_getSetting ('Editor/TabStop'));
	this.tabString = ParseTree._priv_geTabString (this.tabNumCols);
	this.hardWrapColumn = ParseTree._priv_getHardWrapColumn ();
	this.eolString = document.lineEndingString ();
	this._priv_parseDocument (document);
}
ParseTree.prototype = {
	_priv_parseDocument: function (document) {
		var initial, linearNodes;

		initial = ParseTree._priv_parseTxsTokensAndText (document);
		linearNodes = ParseTree._priv_parseCombinedLinear (initial.tokens, initial.text);
		this.root = ParseTree._priv_parseCombinedTree (linearNodes);
	},

	buildText: function () {
		var result;

		this.indentNumPos = 0;
		this.indentPrefix = '';
		result = this._priv_buildNode (this.root);
		this.indentPrefix = null;
		this.indentNumPos = null;
		return (result);
	},

	_priv_buildNode: function (node) {
		switch (node.type) {
		case ParseNode.typeComment:
		case ParseNode.typeVerbatim:
			return (this._priv_buildNodeVerbatim (node));
		case ParseNode.typeEmptyLine:
			return (this._priv_buildNodeEmptyLine ());
		case ParseNode.typeEnv:
			return (this._priv_buildNodeEnv (node));
		case ParseNode.typeRoot:
			return (this._priv_buildNodeRoot (node));
		case ParseNode.typeText:
			return (this._priv_buildNodeText (node));
		default:
			fatal_error ('Unsupported node type');
		}
	},

	_priv_buildNodeEmptyLine: function () {
		return (this.eolString);
	},

	_priv_buildNodeEnv: function (node) {
		var result, oldIndentNumPos, oldIndentPrefix;

		result = this.indentPrefix + node.textOpen + this.eolString;
		oldIndentNumPos = this.indentNumPos;
		oldIndentPrefix = this.indentPrefix;
		if ((node.envName in config.noIndent) == false) {
			this.indentNumPos += this.tabNumCols;
			this.indentPrefix += this.tabString;
		}
		result += this._priv_buildChildren (node);
		this.indentNumPos = oldIndentNumPos;
		this.indentPrefix = oldIndentPrefix;
		result += this.indentPrefix + node.textClose + this.eolString;
		return (result);
	},

	_priv_buildNodeRoot: function (node) {
		return (this._priv_buildChildren (node));
	},

	_priv_buildNodeText: function (node) {
		var getLineEnd = function (text, lineStart, maxLength) {
			var maxPos, lineEnd, ch;

			maxPos = lineStart + maxLength;
			if (maxPos >= text.length) {
				return (text.length);
			}
			/*
				Search for a line length that does not exceed the maximum allowed length.

				The following code relies on the fact that text nodes have their leading and
				trailing whitespace trimmed . Otherwise we could return an empty line string
				which would cause an endless loop building the lines for the text node.
			*/
			for (lineEnd = maxPos; lineEnd > lineStart; --lineEnd) {
				/*
					All whitespace inside the text node has been compressed to single
					space characters so as long as we found a space we know that the preceding
					character is a non-whitespace character.
				*/
				if (text.charAt (lineEnd) == ' ') {
					return (lineEnd);
				}
			}
			/*
				It is not possible to get a line length that does not exceed the maximum
				allowed length. Try to find the minimal line length exceeding the maximum
				allowed length.
			*/
			for (lineEnd = maxPos + 1; lineEnd < text.length; ++lineEnd) {
				if (text.charAt (lineEnd) == ' ') {
					return (lineEnd);
				}
			}
			// The text does not contain any whitespace, so return the length of the whole text
			return (text.length);
		};

		var lineMaxLength, lineText, lineStart, lineEnd;

		if (this.hardWrapColumn === null) {
			return (this.indentPrefix + node.text + this.eolString);
		}
		lineMaxLength =
			(this.indentNumPos < this.hardWrapColumn) ?
			(this.hardWrapColumn - this.indentNumPos) :
			0;
		lineText = '';
		/*
			All whitespace inside the text node has been compressed to single
			space characters so after processing each line we just add one to the current
			position to get the start of the next line
		*/
		for (lineStart = 0; lineStart < node.text.length; lineStart = lineEnd + 1) {
			lineEnd = getLineEnd (node.text, lineStart, lineMaxLength);
			lineText += this.indentPrefix + node.text.substring (lineStart, lineEnd) + this.eolString;
		}
		return (lineText);
	},

	_priv_buildNodeVerbatim: function (node) {
		return (this.indentPrefix + node.text + this.eolString);
	},

	_priv_buildChildren: function (node) {
		var result, i, n;

		result = '';
		for (i = 0, n = node.children.length; i < n; ++i) {
			result += this._priv_buildNode (node.children [i]);
		}
		return (result);
	}
};
ParseTree._priv_geTabString = function (tabNumCols) {
	var result, i;

	if (ParseTree._priv_getSetting ('Editor/Indent%20with%20Spaces') == 'true') {
		result = '';
		for (i = 0; i < tabNumCols; ++i) {
			result += ' ';
		}
	} else {
		result = "\t";
	}
	return (result);
};
ParseTree._priv_getHardWrapColumn = function () {
	return (
		(ParseTree._priv_getSetting ('Editor/WordWrapMode') === 3) ?
		ParseTree._priv_getSetting ('Editor/WrapLineWidth') :
		null
	);
};
ParseTree._priv_getSetting = function (name) {
	var value;

	if ((value = getPersistent (name)) === null) {
		fatal_error ('Missing setting \'' + name + '\' or access is denied');
	}
	return (value);

};
ParseTree._priv_parseTxsTokensAndText = function (document) {
	var documentTokens, documentText, lines, lineOffset, i, lineTokens, j, oneLineToken;

	documentTokens = [];
	documentText = '';
	lines = document.textLines ();
	// When the last line ends with an EOL, TXS adds an extra empty line to the lines array
	if (lines.length && (lines [lines.length-1] == '')) {
		lines.pop ();
	}
	lineOffset = 0;
	for (i = 0; i < lines.length; ++i) {
		if ((lineTokens = document.getLineTokens (i)) === false) {
			fatal_error ('Line ' + i + ' does not have parse information');
		}
		for (j = 0; j < lineTokens.length; ++j) {
			oneLineToken = lineTokens [j];
			documentTokens.push ({
				type: oneLineToken.type,
				subtype: oneLineToken.subtype,
				level: oneLineToken.level,
				offset: lineOffset + oneLineToken.startColumn,
				text: oneLineToken.text
			});
		}
		documentText += lines [i] + '\n';
		lineOffset += lines [i].length + 1;
	}
	return ({tokens: documentTokens, text: documentText});
};
ParseTree._priv_parseCombinedLinear = function (txsTokens, text) {
	var linearNodes, textStart, txsIndex, oneTxsToken, commandInfo, envName, verbatimEnd;

	linearNodes = [];
	textStart = 0;
	txsIndex = 0;
	while (txsIndex < txsTokens.length) {
		oneTxsToken = txsTokens [txsIndex];
		switch (oneTxsToken.type) {
		case latexTokenType.command:
			if (oneTxsToken.text in config.separateLine) {
				commandInfo = ParseTree._priv_getCommandInfo (txsTokens, txsIndex);
				if (textStart < commandInfo.textStart) {
					ParseTree._priv_parseCombinedText (linearNodes, text.substring (textStart, commandInfo.textStart));
				}
				linearNodes.push (ParseNode.createText (text.substring (commandInfo.textStart, commandInfo.textEnd)));
				textStart = commandInfo.textEnd;
				txsIndex = commandInfo.nextTokenIndex;
			} else {
				++txsIndex;
			}
			break;
		case latexTokenType.beginEnv:
			commandInfo = ParseTree._priv_getCommandInfo (txsTokens, txsIndex);
			if (textStart < commandInfo.textStart) {
				ParseTree._priv_parseCombinedText (linearNodes, text.substring (textStart, commandInfo.textStart));
			}
			envName = oneTxsToken.text;
			if (envName == "verbatim") {
				verbatimEnd = ParseTree._priv_parseFindVerbatimEnd (txsTokens, txsIndex + 1);
				linearNodes.push (ParseNode.createVerbatim (
					text.substring (commandInfo.textStart, verbatimEnd.textEnd)
				))
				textStart = verbatimEnd.textEnd;
				txsIndex = verbatimEnd.nextTokenIndex;
			} else {
				textStart = commandInfo.textEnd;
				linearNodes.push (ParseNode.createEnvBegin (
					envName,
					text.substring (commandInfo.textStart, commandInfo.textEnd)
				))
				txsIndex = commandInfo.nextTokenIndex;
			}
			break;
		case latexTokenType.env:
			commandInfo = ParseTree._priv_getCommandInfo (txsTokens, txsIndex);
			if (textStart < commandInfo.textStart) {
				ParseTree._priv_parseCombinedText (linearNodes, text.substring (textStart, commandInfo.textStart));
			}
			textStart = commandInfo.textEnd;
			linearNodes.push (ParseNode.createEnvEnd (
				txsTokens [txsIndex].text,
				text.substring (commandInfo.textStart, commandInfo.textEnd)
			))
			txsIndex = commandInfo.nextTokenIndex;
			break;
		default:
			++txsIndex;
			break;
		}
	}
	if (textStart < text.length) {
		ParseTree._priv_parseCombinedText (linearNodes, text.substring (textStart));
	}
	return (linearNodes);
};
ParseTree._priv_parseFindVerbatimEnd = function (txsTokens, startIndex) {
	var index, oneTxsToken;

	for (index = startIndex; index < txsTokens.length; ++index) {
		oneTxsToken = txsTokens [index];
		if ((oneTxsToken.type == latexTokenType.env) && (oneTxsToken.text == "verbatim")) {
			return (ParseTree._priv_getCommandInfo (txsTokens, index));
		}
	}
	fatal_error ("Could not find \\end{verbatim}");
};
ParseTree._priv_getCommandInfo = function (txsTokens, indexInner) {
	var indexFirst, indexLast, textStart, textEnd, i, newStart, newEnd;

	indexFirst = ParseTree._priv_getCommandFirst (txsTokens, indexInner);
	indexLast = ParseTree._priv_getCommandLast (txsTokens, indexFirst);
	/*
		Token ends do not increase monotonically, e.g. \begin{document}
		is represented by \begin, {document}, document
		That is why we have to check each token for leftmost/rightmost
		postition in text.
	*/
	textStart = null;
	textEnd = null;
	for (i = indexFirst; i <= indexLast; ++i) {
		newStart = txsTokens [i].offset;
		newEnd = newStart + txsTokens [i].text.length;
		if ((textStart === null) || (newStart < textStart)) {
			textStart = newStart;
		}
		if ((textEnd === null) || (newEnd > textEnd)) {
			textEnd = newEnd;
		}
	}
	return ({
		textStart: textStart,
		textEnd: textEnd,
		nextTokenIndex: indexLast + 1
	});
};
ParseTree._priv_getCommandFirst = function (txsTokens, indexInner) {
	var maxLevel, indexCmd, oneToken;

	maxLevel = txsTokens [indexInner].level;
	for (indexCmd = indexInner; indexCmd >= 0; --indexCmd) {
		oneToken = txsTokens [indexCmd];
		if (
			(oneToken.level <= maxLevel) &&
			(oneToken.type == latexTokenType.command)
		) {
			return (indexCmd);
		}
		if (maxLevel < oneToken.level) {
			maxLevel = oneToken.level;
		}
	}
	fatal_error ('Could not find command for token ' + txsTokens [indexInner].text);
};
ParseTree._priv_getCommandLast = function (txsTokens, indexFirst) {
	var commandLevel, indexLast;

	commandLevel = txsTokens [indexFirst].level;
	for (indexLast = indexFirst + 1; indexLast < txsTokens.length; ++indexLast) {
		if (txsTokens [indexLast].level <= commandLevel) {
			break;
		}
	}
	--indexLast;
	return (indexLast);
};
ParseTree._priv_parseCombinedText = function (linearNodes, text) {
	var tryCreateText = function (textStart, textEnd) {
		var output;

		if (textStart == textEnd) {
			return;
		}
		output = text.substring (textStart, textEnd);
		output = output.replace (/\s+/g, ' ');
		output = output.trim ();
		if (output.length == 0) {
			return;
		}
		linearNodes.push (ParseNode.createText (output));
	};

	/*
		The TXS tokenizer does not provide the comment tokens (even though it has a comment token type),
		so we have to detect manually the comments. We also detect the empty lines (TeX paragraphs and
		turn them into typeEmptyLine nodes.
	*/
	offset = 0;
	rx = /(\n{2,})|%[^\n]*/g;
	rx.lastIndex = 0;
	while ((match = rx.exec (text)) !== null) {
		tryCreateText (offset, match.index);
		switch (match [0].charAt (0)) {
		case '\n':
			linearNodes.push (ParseNode.createEmptyLine ());
			break;
		case '%':
			linearNodes.push (ParseNode.createComment (match [0]));
			break;
		default:
			fatal_error ('Unknown match type');
		}
		offset = match.index + match [0].length;
	}
	tryCreateText (offset, text.length);
};
ParseTree._priv_parseCombinedTree = function (linearNodes) {
	var root;

	root = ParseNode.createRoot ();
	ParseTree._priv_parseCombinedTreeChildren (root, linearNodes, 0, linearNodes.length);
	return (root);
};
ParseTree._priv_parseCombinedTreeChildren = function (parent, linearNodes, indexBegin, indexEnd) {
	var i, j, linearToken, treeToken;

	i = indexBegin;
	while (i < indexEnd) {
		linearToken = linearNodes [i];
		switch (linearToken.type) {
		case ParseNode.typeEnvBegin:
			j = ParseTree._priv_parseCombinedTreeFindEnvEnd (linearNodes, i, indexEnd);
			treeToken = ParseNode.createEnv (linearToken.envName, linearToken.text, linearNodes [j].text);
			ParseTree._priv_parseCombinedTreeChildren (treeToken, linearNodes, i+1, j);
			parent.addChild (treeToken);
			i = j + 1;
			break;
		case ParseNode.typeEnvEnd:
			fatal_error ('Unexpected environment end');
		default:
			parent.addChild (linearToken);
			++i;
			break;
		}
	}
};
ParseTree._priv_parseCombinedTreeFindEnvEnd = function (linearNodes, indexBegin, indexLimit) {
	var envName, depth, indexEnd, oneNode;

	envName = linearNodes [indexBegin].envName;
	depth = 1;
	for (indexEnd = indexBegin + 1; indexEnd < indexLimit; ++indexEnd) {
		oneNode = linearNodes [indexEnd];
		if ((oneNode.type == ParseNode.typeEnvBegin) && (oneNode.envName == envName)) {
			++depth;
		} else if ((oneNode.type == ParseNode.typeEnvEnd) && (oneNode.envName == envName)) {
			if (--depth == 0) {
				return (indexEnd);
			}
		}
	}
	fatal_error ('Could not find environment end');
};

// Global code

config.noIndent = configArrayToMap (config.noIndent);
config.separateLine = configArrayToMap (config.separateLine);
if (typeof (editor) == 'undefined') {
	fatal_error ('No open editor');
}
tree = new ParseTree (editor.document ());
newText = tree.buildText ();
editor.setText (newText);
